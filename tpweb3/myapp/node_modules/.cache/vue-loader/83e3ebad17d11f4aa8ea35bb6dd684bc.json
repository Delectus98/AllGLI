{"remainingRequest":"/home/mbeucher/web-workspace/github/AllGLI/tpweb3/myapp2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/mbeucher/web-workspace/github/AllGLI/tpweb3/myapp2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mbeucher/web-workspace/github/AllGLI/tpweb3/myapp2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mbeucher/web-workspace/github/AllGLI/tpweb3/myapp2/src/components/todos.vue?vue&type=template&id=1ece2e8d&scoped=true&lang=html&","dependencies":[{"path":"/home/mbeucher/web-workspace/github/AllGLI/tpweb3/myapp2/src/components/todos.vue","mtime":1602146944064},{"path":"/home/mbeucher/web-workspace/github/AllGLI/tpweb3/myapp2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mbeucher/web-workspace/github/AllGLI/tpweb3/myapp2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/mbeucher/web-workspace/github/AllGLI/tpweb3/myapp2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mbeucher/web-workspace/github/AllGLI/tpweb3/myapp2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}